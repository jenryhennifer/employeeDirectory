{"version":3,"sources":["logo.svg","components/Jumbotron/Jumbotron.js","components/Table/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Jumbotron","className","alt","src","Table","employees","React","useState","sorted","setSorted","search","setSearch","searchEmployee","filter","emp","name","includes","console","log","sortedEmployees","concat","sort","a","b","aval","bval","type","placeholder","aria-label","value","onChange","event","target","onClick","map","employee","image","position","species","status","id","App","EmployeeList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o+yBAAe,I,kBCaAA,MAVf,WACE,OACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKC,IAAI,iBAAiBC,IAAI,sI,aC0EvBC,MA9Ef,YAA+B,IAAdC,EAAa,EAAbA,UAAa,EACAC,IAAMC,SAAS,MADf,mBACrBC,EADqB,KACbC,EADa,OAGAH,IAAMC,SAAS,IAHf,mBAGrBG,EAHqB,KAGbC,EAHa,KAQtBC,EAAiBP,EAAUQ,QAAO,SAACC,GAAD,OAASA,EAAIC,KAAKC,SAASN,MAEnEO,QAAQC,IAAIN,GAEZ,IAAMO,EAAkBX,EACpBI,EAAeQ,SAASC,MAAK,SAACC,EAAGC,GAC/B,IAAMC,EAAOF,EAAEd,GACTiB,EAAOF,EAAEf,GACf,OAAIgB,EAAOC,GACD,EACCA,EAAOD,EACT,EAEA,KAGXZ,EAEJ,OACE,gCACE,qBAAKX,UAAU,6BAAf,SACE,uBACEA,UAAU,eACVyB,KAAK,OACLC,YAAY,SACZC,aAAW,SACXC,MAAOnB,EACPoB,SA/Ba,SAACC,GACpBpB,EAAUoB,EAAMC,OAAOH,YAiCrB,kCACE,+BACE,6BACE,0CAEF,6BACE,qBAAKI,QAAS,kBAAMxB,EAAU,SAA9B,oBAEF,6BACE,qBAAKwB,QAAS,kBAAMxB,EAAU,aAA9B,wBAEF,6BACE,qBAAKwB,QAAS,kBAAMxB,EAAU,YAA9B,uBAEF,6BACE,qBAAKwB,QAAS,kBAAMxB,EAAU,WAA9B,yBAGHU,EAAgBe,KAAI,SAACC,GAAD,OACnB,+BACE,6BACE,qBAAKlC,UAAU,aAAaE,IAAKgC,EAASC,UAE5C,6BAAKD,EAASpB,OACd,6BAAKoB,EAASE,WACd,6BAAKF,EAASG,UACd,6BACGH,EAASI,OACR,qBAAKtC,UAAU,UAAf,qBAEA,qBAAKA,UAAU,SAAf,wBAXGkC,EAASK,cC1CbC,MAVf,WAEE,OACE,sBAAKxC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAOI,UAAcqC,QCDZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b5d612c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <div className=\"container\">\n        <img alt=\"planet express\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Futurama_Planet_Express.svg/1200px-Futurama_Planet_Express.svg.png\"></img>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from 'react';\nimport './style.css';\n\nfunction Table({ employees }) {\n  const [sorted, setSorted] = React.useState(null);\n\n  const [search, setSearch] = React.useState('');\n  const handleChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const searchEmployee = employees.filter((emp) => emp.name.includes(search));\n\n  console.log(searchEmployee);\n\n  const sortedEmployees = sorted\n    ? searchEmployee.concat().sort((a, b) => {\n        const aval = a[sorted];\n        const bval = b[sorted];\n        if (aval < bval) {\n          return -1;\n        } else if (bval < aval) {\n          return 1;\n        } else {\n          return 0;\n        }\n      })\n    : searchEmployee;\n\n  return (\n    <div>\n      <div className=\"input-group input-group-lg\">\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          value={search}\n          onChange={handleChange}\n        />\n      </div>\n      <table>\n        <tr>\n          <th>\n            <div>Image</div>\n          </th>\n          <th>\n            <div onClick={() => setSorted('name')}>Name</div>\n          </th>\n          <th>\n            <div onClick={() => setSorted('position')}>Position</div>\n          </th>\n          <th>\n            <div onClick={() => setSorted('species')}>Species</div>\n          </th>\n          <th>\n            <div onClick={() => setSorted('status')}>Status</div>\n          </th>\n        </tr>\n        {sortedEmployees.map((employee) => (\n          <tr key={employee.id}>\n            <td>\n              <img className=\"employeeID\" src={employee.image}></img>\n            </td>\n            <td>{employee.name}</td>\n            <td>{employee.position}</td>\n            <td>{employee.species}</td>\n            <td>\n              {employee.status ? (\n                <div className=\"current\">Current</div>\n              ) : (\n                <div className=\"former\">Former</div>\n              )}\n            </td>\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EmployeeList from \"./employees.json\";\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Table from './components/Table/Table'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Jumbotron />\n      <Table employees = { EmployeeList } />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}